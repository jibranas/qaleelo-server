{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Contexts/ScoreContext.js","components/QuizExample.js","components/ScoreCard.js","components/Quiz.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ScoreContext","createContext","SubmitButtonContext","keyframes","ExampleBox","styled","div","ExampleQuestion","h3","ExampleAnswer","props","answerClicked","answer","submitted","answerColor","AnswerExplanation","QuizExample","useContext","sumCorrect","setSumCorrect","useState","setAnswerColor","setAnswerClicked","answerClickedToPractice","setAnswerClickedToPractice","selectedAnswer","setSelectedAnswer","useEffect","length","checkAnswer","isCorrect","index","newAnswerList","console","log","pushCorrectAnswer","exampleIndex","pushWrongAnswer","example","question","answers","map","answerItem","onClick","explanation","style","color","display","fontSize","margin","marginTop","textAlign","to","topicNumber","sectionNumber","ButtonH2","button","ScoreCardBorder","scorePercentage","ScoreCardText","p","ScoreMessage","css","ScoreCardButtons","ScoreCard","exampleDatafromBackEnd","useAmazonContext","setSubmitted","location","useLocation","sum","reduce","a","b","Math","round","backToStudiesHashLinkPath","goBackTo","comingFrom","sections","constructor","state","morePracticeHashLinkPath","chooseRandom","num","res","i","random","floor","includes","push","needtoSelect","ceil","selectedSectionExamples","selectedSectionExamplesPool","finalSetOfExamplesToDisplay","finalExamplesOutput","allSectionExamples","filter","apply","pathname","scoreCardSelectedQuizQuestons","marginBottom","QuizTitle","SubmitButton","Quiz","whereDidIComeFrom","window","scrollTo","top","behavior","selectedQuizQuestions","topicSelectedQuizQuestions","sectionSelectedQuizQuestions","Provider","value","section","sectionList","match","params","width","backgroundColor","height","borderRadius","border","undefined","justifyContent"],"mappings":"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","file":"static/js/5.96287ed0.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, createContext } from \"react\";\r\n\r\nexport const ScoreContext = createContext();\r\n\r\nexport const SubmitButtonContext = createContext();\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport styled, { keyframes, css } from \"styled-components\";\r\nimport { ButtonH2 } from \"./Buttons\";\r\nimport { ScoreContext, SubmitButtonContext } from \"../Contexts/ScoreContext\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\n\r\nconst fadeIn = keyframes`\r\n0%{opacity: 0}\r\n100%{opacity: 1}\r\n`;\r\n\r\nconst ExampleBox = styled.div`\r\n  box-shadow: 0 0.1rem 0.5rem rgba(0, 0, 0, 0.2);\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  background: #f8f8f8;\r\n  margin: 40px 40px;\r\n  font-family: \"Quicksand\", sans-serif;\r\n`;\r\n\r\nconst ExampleQuestion = styled.h3`\r\n  font-size: 2.2vh;\r\n  text-align: center;\r\n`;\r\n\r\nconst ExampleAnswer = styled.div`\r\n  font-size: 2.2vh;\r\n  display: flex;\r\n  background: ${(props) =>\r\n    props.answerClicked == props.answer && props.submitted\r\n      ? props.answerColor\r\n      : props.answerClicked == props.answer\r\n      ? \"#DFDFDF\"\r\n      : \"#fcebeb\"};\r\n  margin-bottom: 10px;\r\n  margin-top: 10px;\r\n  transition: transform 300ms;\r\n  justify-content: center;\r\n  pointer-events: ${(props) => (props.submitted ? \"none\" : \"auto\")};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    box-shadow: 0 0.1rem 0.5rem rgba(0, 0, 0, 0.2);\r\n    transform: scale(1.02);\r\n  }\r\n`;\r\n\r\nconst AnswerExplanation = styled.div`\r\n  font-size: 2vh;\r\n\r\n  display: ${(props) =>\r\n    props.answerClicked == props.answer && props.submitted ? \"flex\" : \"none\"};\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n`;\r\n\r\nconst QuizExample = (props) => {\r\n  const [sumCorrect, setSumCorrect] = useContext(ScoreContext);\r\n  const [submitted, setSubmitted] = useContext(SubmitButtonContext);\r\n\r\n  const [answerColor, setAnswerColor] = useState(\"#fcebeb\");\r\n  const [answerClicked, setAnswerClicked] = useState(\"NoAnswer\");\r\n  const [answerClickedToPractice, setAnswerClickedToPractice] = useState(false);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(\"noSelection\");\r\n\r\n  // Issue: when i click on try again, if the same quiz example came up after re-render, it would show as already clicked due to code : props.answerClicked == props.answer\r\n  //  ? \"#DFDFDF\". In order to tackle it, this logic says, when try again is clicked\r\n  //(indicatied by sumCorrect becoming 0) AND when value of submitted changes (in this case from true to false when try agian button is clicked)  only then should the code set all answers to no answer and prevent any highlight logic to take place.\r\n  // Both conditons were needed, else didnt produced required result as can be seen if you tried to remove length==0 logic\r\n\r\n  useEffect(() => {\r\n    if (sumCorrect.length == 0) {\r\n      setAnswerClicked(\"NoAnswer\");\r\n    }\r\n  }, [submitted]);\r\n\r\n  const checkAnswer = (isCorrect, answer) => {\r\n    setAnswerClicked(answer);\r\n    setAnswerClickedToPractice(true);\r\n\r\n    if (isCorrect == true) {\r\n      setAnswerColor(\"#DAF7A6\");\r\n      setSelectedAnswer(true);\r\n      pushCorrectAnswer(props.exampleIndex);\r\n      console.log(props.exampleIndex);\r\n    } else {\r\n      setAnswerColor(\"#ff726f\");\r\n      setSelectedAnswer(false);\r\n      pushWrongAnswer(props.exampleIndex);\r\n    }\r\n  };\r\n\r\n  function pushCorrectAnswer(index) {\r\n    const newAnswerList = [...sumCorrect];\r\n    newAnswerList[index] = 1;\r\n    setSumCorrect(newAnswerList);\r\n    console.log(sumCorrect);\r\n  }\r\n\r\n  function pushWrongAnswer(index) {\r\n    const newAnswerList = [...sumCorrect];\r\n    newAnswerList[index] = 0;\r\n    setSumCorrect(newAnswerList);\r\n    console.log(sumCorrect);\r\n  }\r\n\r\n  return (\r\n    <ExampleBox>\r\n      <ExampleQuestion>{props.example.question}</ExampleQuestion>\r\n      {props.example.answers.map((answerItem) => {\r\n        return (\r\n          <>\r\n            <ExampleAnswer\r\n              onClick={() =>\r\n                checkAnswer(answerItem.isCorrect, answerItem.answer)\r\n              }\r\n              answerColor={answerColor}\r\n              answer={answerItem.answer}\r\n              answerClicked={answerClicked}\r\n              submitted={submitted}\r\n              sumCorrect={sumCorrect}\r\n            >\r\n              <p>{answerItem.answer}</p>\r\n            </ExampleAnswer>\r\n            {\r\n              <AnswerExplanation\r\n                answerClicked={answerClicked}\r\n                answer={answerItem.answer}\r\n                answerColor={answerColor}\r\n                selectedAnswer={selectedAnswer}\r\n                submitted={submitted}\r\n              >\r\n                {answerItem.explanation ? (\r\n                  <>\r\n                    <p\r\n                      style={{\r\n                        color: \"red\",\r\n                        display: \"inline\",\r\n                        fontSize: \"25px\",\r\n                        margin: \"0 10px\",\r\n                      }}\r\n                    >\r\n                      ✖\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        display: \"inline\",\r\n                      }}\r\n                    >\r\n                      {answerItem.explanation}\r\n                    </p>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <p\r\n                      style={{\r\n                        color: \"green\",\r\n                        display: \"inline\",\r\n                        fontSize: \"25px\",\r\n                        margin: \"0 10px 0 0\",\r\n                      }}\r\n                    >\r\n                      ✓\r\n                    </p>{\" \"}\r\n                    <p>Correct!</p>\r\n                  </>\r\n                )}\r\n              </AnswerExplanation>\r\n            }\r\n          </>\r\n        );\r\n      })}\r\n      <div\r\n        style={\r\n          answerClickedToPractice && submitted\r\n            ? { display: \"block\", marginTop: \"30px\", textAlign: \"center\" }\r\n            : { display: \"none\" }\r\n        }\r\n      >\r\n        <HashLink\r\n          to={`/topic/${props.topicNumber}#${props.example.sectionNumber}`}\r\n        >\r\n          {\" \"}\r\n          {/* Hashlink to go back to the specific Section on the Topic page*/}\r\n          <ButtonH2>Study this Lesson</ButtonH2>\r\n        </HashLink>\r\n      </div>\r\n    </ExampleBox>\r\n  );\r\n};\r\n\r\nexport default QuizExample;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  QuizState,\r\n  ScoreContext,\r\n  SubmitButtonContext,\r\n} from \"../Contexts/ScoreContext\";\r\nimport styled, { css } from \"styled-components\";\r\n// import { ButtonH2 } from \"./Buttons\";\r\nimport \"./Quiz.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport { allExampleData } from \"./TopicData\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useAmazonContext } from \"../Contexts/AmazonContext\";\r\n\r\nconst ButtonH2 = styled.button`\r\n  background: red;\r\n  font-family: \"Roboto\", sans-serif;\r\n  padding: 7px 100px;\r\n  text-transform: uppercase;\r\n  font-size: 2vh;\r\n  overflow: hidden;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  background: #eb8381;\r\n  color: white;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\r\n  transition: all 0.25s ease;\r\n  cursor: pointer;\r\n\r\n  &:active {\r\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.5);\r\n    background: #f2b1ae;\r\n  }\r\n`;\r\n\r\nconst ScoreCardBorder = styled.div`\r\n  background: ${(props) =>\r\n    props.scorePercentage == 100 ? \"#f6ffe6\" : \"#e8c6c5\"};\r\n  font-size: 40px;\r\n  white-space: pre-line;\r\n  margin: 10px 30px;\r\n  padding: 10px;\r\n  box-shadow: 0 0.1rem 0.1rem rgba(0, 0, 0, 0.2);\r\n  display: ${(props) =>\r\n    props.submitted\r\n      ? \"flex\"\r\n      : \"none\"}; /* Display score card only when button is clicked, ie. when submitted state is true */\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  text-align: center;\r\n  font-family: \"Quicksand\", sans-serif;\r\n  border-radius: 1rem;\r\n  padding: 20px;\r\n`;\r\n\r\nconst ScoreCardText = styled.p`\r\n  font-size: 3vh;\r\n  text-align: center;\r\n  font-weight: 900;\r\n  margin: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst ScoreMessage = styled.div`\r\n  font-size: 3vh;\r\n  text-align: center;\r\n  font-weight: 900;\r\n  margin: 0;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  animation: ${(props) =>\r\n    props.submitted && props.scorePercentage == 100\r\n      ? css`\r\n          shakeY 1s 1s\r\n        `\r\n      : props.submitted && props.scorePercentage < 100\r\n      ? css`\r\n          shakeX 1s 1s\r\n        `\r\n      : \"none\"};\r\n\r\n  @media (max-width: 1200px) {\r\n    flex-basis: 100%;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst ScoreCardButtons = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  @media (max-width: 1200px) {\r\n    flex-basis: 100%;\r\n    margin-top: 30px;\r\n  }\r\n`;\r\n\r\nconst ScoreCard = (props) => {\r\n  //Obtain Example Data from back end\r\n  const { exampleDatafromBackEnd } = useAmazonContext();\r\n  console.log(exampleDatafromBackEnd);\r\n\r\n  const [sumCorrect, setSumCorrect] = useContext(ScoreContext);\r\n  const [scoreCardColour, setScoreCardColour] = useState(\"#f8f8f8\");\r\n  const [submitted, setSubmitted] = useContext(SubmitButtonContext);\r\n  const location = useLocation(); //Props obtained from Router Link\r\n\r\n  const sum = sumCorrect.reduce(function (a, b) {\r\n    return a + b;\r\n  }, 0);\r\n\r\n  const scorePercentage = Math.round((sum / sumCorrect.length) * 100);\r\n\r\n  let sectionID = props.goBackTo; //depricated, now using backToStudiesHashLinkPath\r\n  let backToStudiesHashLinkPath =\r\n    props.comingFrom == \"Topic\"\r\n      ? `/topic/${props.topicNumber}`\r\n      : props.comingFrom == \"Section\"\r\n      ? `/topic/${props.topicNumber}#${props.sectionNumber}`\r\n      : props.comingFrom == \"ScoreCard\" && props.sections.constructor == Array //Same logic as used in the quiz algorithm to figure out if it needs to go back to a topic or section\r\n      ? `/topic/${props.topicNumber}`\r\n      : props.comingFrom == \"ScoreCard\"\r\n      ? `/topic/${props.topicNumber}#${location.state.sectionNumber}`\r\n      : \"none\";\r\n  let morePracticeHashLinkPath =\r\n    props.comingFrom == \"Topic\"\r\n      ? `/quiz/${props.topicNumber}`\r\n      : props.comingFrom == \"Section\"\r\n      ? `/quiz/${props.topicNumber}/${props.sectionNumber}`\r\n      : props.comingFrom == \"ScoreCard\" && props.sections.constructor == Array\r\n      ? `/quiz/${props.topicNumber}`\r\n      : props.comingFrom == \"ScoreCard\"\r\n      ? `/quiz/${props.topicNumber}/${location.state.sectionNumber}`\r\n      : \"none\";\r\n\r\n  // if (scorePercentage == 100) {\r\n  //   setScoreCardColour(\"#ff726f\");\r\n  // } else {\r\n  //   setScoreCardColour(\"#DAF7A6\");\r\n  // }\r\n\r\n  //Keeping the quiz ready if a user hits try again , same algorithm to find questions if coming from the Topic or a Section.\r\n\r\n  // Randomiser function to create quiz for all topics\r\n\r\n  const chooseRandom = (arr, num) => {\r\n    const res = [];\r\n    for (let i = 0; i < num; ) {\r\n      const random = Math.floor(Math.random() * arr.length);\r\n      if (res.includes(arr[random])) {\r\n        continue;\r\n      }\r\n      res.push(arr[random]);\r\n      i++;\r\n    }\r\n    return res;\r\n  };\r\n\r\n  // Number of questions display properties\r\n  console.log(props.comingFrom);\r\n  console.log(props.sections);\r\n  console.log(props.topicNumber);\r\n  console.log(props.sectionNumber);\r\n  let needToDisplay = 3;\r\n  let needtoSelect = Math.ceil(needToDisplay / props.sections.length);\r\n\r\n  let selectedSectionExamples = []; //List of selected examples from each section\r\n  let selectedSectionExamplesPool = []; //List of all selected examples from all sections\r\n  let finalSetOfExamplesToDisplay = []; //final list of examples to display\r\n  let finalExamplesOutput = []; //finalOutput of examples\r\n\r\n  // Algorithm for obtaining questions from each section:\r\n  if (props.comingFrom == \"Topic\") {\r\n    props.sections.map((sectionNumber) => {\r\n      //Mapping through the list of sections that from the Topic\r\n      let allSectionExamples = exampleDatafromBackEnd.filter(\r\n        //list of ALL examples for a particular section in the database\r\n        (example) => example.sectionNumber == sectionNumber\r\n      );\r\n      if (allSectionExamples.length > needtoSelect) {\r\n        selectedSectionExamples = chooseRandom(\r\n          allSectionExamples,\r\n          needtoSelect\r\n        );\r\n        selectedSectionExamplesPool.push.apply(\r\n          selectedSectionExamplesPool,\r\n          selectedSectionExamples\r\n        );\r\n      } else {\r\n        selectedSectionExamplesPool.push.apply(\r\n          selectedSectionExamplesPool,\r\n          allSectionExamples\r\n        );\r\n      }\r\n    });\r\n    if (selectedSectionExamplesPool.length > needToDisplay) {\r\n      finalSetOfExamplesToDisplay = chooseRandom(\r\n        selectedSectionExamplesPool,\r\n        needToDisplay\r\n      );\r\n      finalExamplesOutput = finalSetOfExamplesToDisplay;\r\n    } else {\r\n      finalSetOfExamplesToDisplay = selectedSectionExamplesPool;\r\n      finalExamplesOutput = finalSetOfExamplesToDisplay;\r\n    }\r\n  } else if (props.comingFrom == \"Section\") {\r\n    let allSectionExamples = exampleDatafromBackEnd.filter(\r\n      (example) => example.sectionNumber == props.sections\r\n    );\r\n    if (allSectionExamples.length > needToDisplay) {\r\n      selectedSectionExamples = chooseRandom(allSectionExamples, needToDisplay);\r\n      finalExamplesOutput = selectedSectionExamples;\r\n    } else {\r\n      selectedSectionExamples = allSectionExamples;\r\n      finalExamplesOutput = selectedSectionExamples;\r\n    }\r\n  } else if (props.comingFrom == \"ScoreCard\") {\r\n    //If someone were to click Try Again from the score card, I was having a hard time trying to make the code determine which of the two logic above (Topic or Section) to run.\r\n    //If the quiz is rerun by clicking try again from score card, i need to determine whether the quiz is Topic or Section. Because Topic and Section have their own logic of running the quiz randomniser, I know that if its coming from Topic it will be an array and if it is coming form sections it is a list therefore i will run my logic based on that\r\n    if (props.sections.constructor == Array) {\r\n      props.sections.map((sectionNumber) => {\r\n        //Mapping through the list of sections that from the Topic\r\n        let allSectionExamples = exampleDatafromBackEnd.filter(\r\n          //list of ALL examples for a particular section in the database\r\n          (example) => example.sectionNumber == sectionNumber\r\n        );\r\n        if (allSectionExamples.length > needtoSelect) {\r\n          selectedSectionExamples = chooseRandom(\r\n            allSectionExamples,\r\n            needtoSelect\r\n          );\r\n          selectedSectionExamplesPool.push.apply(\r\n            selectedSectionExamplesPool,\r\n            selectedSectionExamples\r\n          );\r\n        } else {\r\n          selectedSectionExamplesPool.push.apply(\r\n            selectedSectionExamplesPool,\r\n            allSectionExamples\r\n          );\r\n        }\r\n      });\r\n      if (selectedSectionExamplesPool.length > needToDisplay) {\r\n        finalSetOfExamplesToDisplay = chooseRandom(\r\n          selectedSectionExamplesPool,\r\n          needToDisplay\r\n        );\r\n        finalExamplesOutput = finalSetOfExamplesToDisplay;\r\n      } else {\r\n        finalSetOfExamplesToDisplay = selectedSectionExamplesPool;\r\n        finalExamplesOutput = finalSetOfExamplesToDisplay;\r\n      }\r\n    } else {\r\n      let allSectionExamples = exampleDatafromBackEnd.filter(\r\n        (example) => example.sectionNumber == props.sections\r\n      );\r\n      if (allSectionExamples.length > needToDisplay) {\r\n        selectedSectionExamples = chooseRandom(\r\n          allSectionExamples,\r\n          needToDisplay\r\n        );\r\n        finalExamplesOutput = selectedSectionExamples;\r\n      } else {\r\n        selectedSectionExamples = allSectionExamples;\r\n        finalExamplesOutput = selectedSectionExamples;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(finalSetOfExamplesToDisplay);\r\n  console.log(selectedSectionExamples);\r\n\r\n  const restartQuiz = () => {\r\n    setSubmitted(false);\r\n    setSumCorrect([]);\r\n  };\r\n\r\n  return (\r\n    <ScoreCardBorder submitted={submitted} scorePercentage={scorePercentage}>\r\n      {scorePercentage == 100 ? (\r\n        <ScoreMessage submitted={submitted} scorePercentage={scorePercentage}>\r\n          <p\r\n            style={{\r\n              color: \"green\",\r\n              display: \"inline\",\r\n              fontSize: \"50px\",\r\n              margin: \"0 10px 0 0\",\r\n            }}\r\n          >\r\n            ✓\r\n          </p>\r\n          <p>Congratulations you got them all right!</p>\r\n        </ScoreMessage>\r\n      ) : (\r\n        <ScoreMessage submitted={submitted} scorePercentage={scorePercentage}>\r\n          <p\r\n            style={{\r\n              color: \"#ff726f\",\r\n              display: \"inline\",\r\n              fontSize: \"50px\",\r\n              margin: \"0 10px\",\r\n            }}\r\n          >\r\n            ✖\r\n          </p>\r\n          <p>Not quite there yet!</p>\r\n        </ScoreMessage>\r\n      )}\r\n\r\n      <div>\r\n        <ScoreCardText>Score</ScoreCardText>\r\n        {sum}/{sumCorrect.length}\r\n      </div>\r\n      <div>\r\n        <ScoreCardText>Percentage</ScoreCardText>\r\n        {scorePercentage}%\r\n      </div>\r\n      <ScoreCardButtons>\r\n        <Link\r\n          to={{\r\n            pathname: morePracticeHashLinkPath,\r\n            state: {\r\n              comingFrom: \"ScoreCard\",\r\n              sections: props.sections,\r\n              scoreCardSelectedQuizQuestons: finalExamplesOutput,\r\n              sectionNumber: props.sectionNumber, //Retains the section number to pass where needed\r\n            },\r\n          }}\r\n        >\r\n          <ButtonH2 style={{ marginBottom: 20 }} onClick={restartQuiz}>\r\n            More Practice\r\n          </ButtonH2>\r\n        </Link>\r\n\r\n        <HashLink to={backToStudiesHashLinkPath}>\r\n          <ButtonH2>Back to Studies</ButtonH2>\r\n        </HashLink>\r\n      </ScoreCardButtons>\r\n    </ScoreCardBorder>\r\n  );\r\n};\r\n\r\nexport default ScoreCard;\r\n","import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport TopicData, { allExampleData } from \"./TopicData\";\r\nimport QuizExample from \"./QuizExample\";\r\nimport ScoreCard from \"./ScoreCard\";\r\nimport { ScoreContext, SubmitButtonContext } from \"../Contexts/ScoreContext\";\r\nimport { ButtonH1 } from \"./Buttons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst QuizTitle = styled.p`\r\n  color: #eb8381;\r\n  font-size: 3vh;\r\n  font-family: \"Quicksand\", sans-serif;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin: 30px 30px;\r\n  display: flex;\r\n\r\n  /* justify-content: space-between; */\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  background: red;\r\n  font-family: \"Roboto\", sans-serif;\r\n  padding: 7px 12px;\r\n  text-transform: uppercase;\r\n  font-size: 2vh;\r\n  overflow: hidden;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  background: #eb8381;\r\n  color: white;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\r\n  transition: all 0.25s ease;\r\n  cursor: pointer;\r\n\r\n  &:active {\r\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.5);\r\n    background: #f2b1ae;\r\n  }\r\n`;\r\n\r\nconst Quiz = (props) => {\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [sumCorrect, setSumCorrect] = useState([]);\r\n  const [whereDidIComeFrom, setWhereDidIComeFrom] = useState(\"none\");\r\n  const location = useLocation(); //Props obtained from Router Link\r\n\r\n  const checkSubmission = () => setSubmitted(true);\r\n\r\n  useEffect(() => window.scrollTo({ top: 0, behavior: \"smooth\" }), [submitted]);\r\n\r\n  // console.log(sumCorrect);\r\n\r\n  console.log(whereDidIComeFrom);\r\n  console.log(location.state.comingFrom);\r\n\r\n  let selectedQuizQuestions = [];\r\n\r\n  if (location.state.comingFrom == \"Topic\") {\r\n    selectedQuizQuestions = location.state.topicSelectedQuizQuestions;\r\n  } else if (location.state.comingFrom == \"Section\") {\r\n    selectedQuizQuestions = location.state.sectionSelectedQuizQuestions;\r\n  } else if (location.state.comingFrom == \"ScoreCard\") {\r\n    selectedQuizQuestions = location.state.scoreCardSelectedQuizQuestons;\r\n  }\r\n\r\n  console.log(selectedQuizQuestions);\r\n\r\n  return (\r\n    <ScoreContext.Provider value={[sumCorrect, setSumCorrect]}>\r\n      <SubmitButtonContext.Provider value={[submitted, setSubmitted]}>\r\n        <>\r\n          {submitted ? (\r\n            <ScoreCard\r\n              goBackTo={\r\n                location.state.comingFrom == \"Topic\"\r\n                  ? \"Topic\"\r\n                  : location.state.section\r\n              } //Used to send section to HashLink\r\n              sections={\r\n                location.state.comingFrom == \"Topic\"\r\n                  ? location.state.sectionList\r\n                  : location.state.comingFrom == \"Section\"\r\n                  ? location.state.section\r\n                  : location.state.comingFrom == \"ScoreCard\"\r\n                  ? location.state.sections\r\n                  : \"none\"\r\n              }\r\n              comingFrom={\r\n                location.state.comingFrom == \"Topic\"\r\n                  ? \"Topic\"\r\n                  : location.state.comingFrom == \"Section\"\r\n                  ? \"Section\"\r\n                  : location.state.comingFrom == \"ScoreCard\"\r\n                  ? \"ScoreCard\"\r\n                  : \"none\"\r\n              }\r\n              whereDidIComeFrom={whereDidIComeFrom}\r\n              topicNumber={props.match.params.topicNumber}\r\n              sectionNumber={\r\n                location.state.comingFrom == \"Section\"\r\n                  ? location.state.section\r\n                  : location.state.comingFrom == \"ScoreCard\"\r\n                  ? location.state.sectionNumber\r\n                  : \"none\"\r\n              }\r\n            ></ScoreCard>\r\n          ) : (\r\n            <QuizTitle>\r\n              Pick your answers and submit to see how you are doing so far in\r\n              your journey!\r\n            </QuizTitle>\r\n          )}\r\n\r\n          {selectedQuizQuestions.map((example, index) => {\r\n            return (\r\n              <div>\r\n                <QuizExample\r\n                  topicNumber={props.match.params.topicNumber} //Passed from the 'Link' id substitute which is the topicNumber obtained from the Sidebar\r\n                  example={example}\r\n                  exampleIndex={index}\r\n                ></QuizExample>\r\n                <hr\r\n                  style={{\r\n                    width: \"70vw\",\r\n                    backgroundColor: \"#eb8381\",\r\n                    height: 2,\r\n                    borderRadius: 20,\r\n                    border: 0,\r\n                  }}\r\n                ></hr>\r\n              </div>\r\n            );\r\n          })}\r\n          {sumCorrect.includes(undefined) == false && //When User has clicked all answers, show button, list of answers should not contain undefined\r\n          sumCorrect.length == selectedQuizQuestions.length &&\r\n          submitted == false ? ( //Button will dissappear when submitted == true\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                margin: \"30px 0px\",\r\n              }}\r\n            >\r\n              <SubmitButton onClick={checkSubmission}>\r\n                <b>Submit</b>\r\n              </SubmitButton>\r\n            </div>\r\n          ) : null}\r\n        </>\r\n      </SubmitButtonContext.Provider>\r\n    </ScoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"sourceRoot":""}